/[ \t]/ { /* skip */ }
/\n/ {
  outputStream.TrimSpace()
  outputStream.Write(0, "\n")
  outputStream.SetNewLineFlag()
  return NR
}
/def|new|if|else|sh|echo|import|agent|label|script|environment|stage|node|dir|any|none|for|in/ {
  m := map[string]int{
    "def" : DEF,
    "new" : NEW,
    "if" : IF,
    "else" : ELSE,
    "sh" : SH,
    "echo": ECHO,
    "import": IMPORT,
    "agent": AGENT,
    "label": LABEL,
    "script": SCRIPT,
    "environment": ENVIRONMENT,
    "stage": STAGE,
    "node": NODE,
    "dir": DIR,
    "any": ANY,
    "none": NONE,
    "for": FOR,
    "in": IN,
  }
  outputStream.Write(lval.indent_level,yylex.Text()," ")
  return m[yylex.Text()]
}

/==|!=|>=|<=|\|\||&&/ {
  m := map[string]int{
    "==" : EQ,
    "!=" : NE,
    ">=" : GE,
    "<=" : LE,
    "||" : OR,
    "&&" : AND,
  }
  outputStream.Write(lval.indent_level,yylex.Text()," ")
  return m[yylex.Text()]
}

/{|}/ {
  c := yylex.Text()[0]
  if c == '{' {
    lval.indent_level++
  }
  if c == '}' {
    lval.indent_level--
  }
  outputStream.Write(lval.indent_level,yylex.Text()," ")
  return int(c)
}

/[;{}=+*%\/\-]|<|>/ {
  outputStream.Write(lval.indent_level, yylex.Text()," ")
  return int(yylex.Text()[0])
}
/[(.]|\[/ {
  c := yylex.Text()[0]
  if c == '(' || c=='[' {
    lval.indent_level++
  }
  outputStream.TrimSpace()
  outputStream.Write(lval.indent_level, yylex.Text())
  return int(c)
}
/[:,]|\)|\]/ {
  c := yylex.Text()[0]
  if c == ')' || c == ']' {
    lval.indent_level--
  }
  outputStream.TrimSpace()
  outputStream.Write(lval.indent_level, yylex.Text(), " ")
  return int(yylex.Text()[0])
}

/[a-zA-Z0-9$_]+/ {
  outputStream.Write(lval.indent_level, yylex.Text()," ")
  lval.str = yylex.Text()
  return IDENT
}

/\/\/[^\n]*\n/ {
  outputStream.Write(lval.indent_level, yylex.Text())
  outputStream.SetNewLineFlag()
  // NOTE: return new line value because of including \n at the end
  return NR
}
/\/\*([^\/]|[^*]\/)*\*\// {
  outputStream.Write(lval.indent_level, yylex.Text())
  // NOTE: skipe multi line comment
}

/'''([^']|'[^']|''[^'])*'''/ {
  outputStream.Write(lval.indent_level, yylex.Text()," ")
  lval.str = yylex.Text()
  return STRING
}
/"""([^"]|"[^"]|""[^"])*"""/ {
  outputStream.Write(lval.indent_level, yylex.Text()," ")
  lval.str = yylex.Text()
  return STRING
}
/'[^']*'/ {
  outputStream.Write(lval.indent_level, yylex.Text()," ")
  return STRING
}
/"([^"]|\\")*"/ {
  outputStream.Write(lval.indent_level, yylex.Text()," ")
  return STRING
}
//
/* NOTE: upper case: high priority */
/* NOTE: upper cases: low priority */
package main
import (
)
