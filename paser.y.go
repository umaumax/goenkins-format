// Code generated by goyacc -o paser.y.go -v parser.y.output parser.y. DO NOT EDIT.

//line parser.y:2
package main

import __yyfmt__ "fmt"

//line parser.y:2

//line parser.y:5
type yySymType struct {
	yys          int
	num          int
	str          string
	indent_level int
}

const NR = 57346
const EOF = 57347
const COMMENT = 57348
const BOOL = 57349
const NUMBER = 57350
const STRING = 57351
const IDENT = 57352
const DEF = 57353
const NEW = 57354
const ANY = 57355
const NONE = 57356
const SH = 57357
const ECHO = 57358
const AGENT = 57359
const LABEL = 57360
const STAGE = 57361
const NODE = 57362
const DIR = 57363
const SCRIPT = 57364
const ENVIRONMENT = 57365
const IMPORT = 57366
const IF = 57367
const ELSE = 57368
const FOR = 57369
const IN = 57370
const TRY = 57371
const CATCH = 57372
const INCREMENT = 57373
const DECREMENT = 57374
const ARROW = 57375
const OR = 57376
const AND = 57377
const EQ = 57378
const NE = 57379
const LE = 57380
const GE = 57381
const UNARY_OPERAND = 57382

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"NR",
	"EOF",
	"COMMENT",
	"BOOL",
	"NUMBER",
	"STRING",
	"IDENT",
	"DEF",
	"NEW",
	"ANY",
	"NONE",
	"SH",
	"ECHO",
	"AGENT",
	"LABEL",
	"STAGE",
	"NODE",
	"DIR",
	"SCRIPT",
	"ENVIRONMENT",
	"IMPORT",
	"IF",
	"ELSE",
	"FOR",
	"IN",
	"TRY",
	"CATCH",
	"INCREMENT",
	"DECREMENT",
	"ARROW",
	"OR",
	"AND",
	"'<'",
	"'>'",
	"EQ",
	"NE",
	"LE",
	"GE",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UNARY_OPERAND",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"'='",
	"'{'",
	"'}'",
	"','",
	"':'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser.y:186

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 52,
	1, 23,
	4, 23,
	5, 23,
	56, 23,
	-2, 102,
	-1, 72,
	56, 5,
	-2, 65,
	-1, 116,
	56, 5,
	-2, 65,
	-1, 117,
	33, 66,
	57, 66,
	-2, 42,
	-1, 136,
	4, 9,
	49, 9,
	-2, 73,
	-1, 144,
	4, 9,
	51, 9,
	-2, 73,
	-1, 148,
	4, 9,
	51, 9,
	-2, 73,
	-1, 155,
	56, 5,
	-2, 65,
	-1, 222,
	4, 9,
	51, 9,
	-2, 73,
}

const yyPrivate = 57344

const yyLast = 981

var yyAct = [...]int{

	137, 5, 32, 54, 5, 29, 56, 118, 53, 63,
	65, 66, 71, 115, 73, 69, 80, 114, 171, 77,
	70, 74, 116, 83, 127, 85, 178, 176, 20, 134,
	18, 5, 18, 18, 57, 58, 88, 154, 152, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 72, 109, 1, 71, 106, 108, 31, 170,
	18, 56, 5, 76, 72, 83, 67, 68, 61, 57,
	58, 61, 113, 117, 105, 192, 130, 131, 104, 132,
	25, 225, 36, 171, 37, 86, 87, 249, 109, 226,
	142, 18, 193, 42, 43, 44, 56, 25, 25, 36,
	25, 37, 129, 25, 25, 145, 135, 169, 61, 25,
	136, 138, 25, 25, 143, 139, 111, 117, 144, 25,
	167, 162, 164, 165, 166, 158, 246, 62, 161, 128,
	180, 141, 149, 168, 156, 25, 148, 25, 155, 175,
	25, 153, 110, 209, 242, 129, 129, 235, 78, 207,
	233, 185, 81, 82, 231, 33, 117, 75, 191, 218,
	216, 223, 199, 240, 194, 159, 215, 89, 117, 90,
	200, 184, 84, 190, 196, 149, 203, 204, 205, 51,
	188, 198, 213, 79, 212, 129, 107, 210, 19, 34,
	25, 25, 17, 219, 220, 112, 139, 3, 162, 2,
	30, 0, 117, 229, 0, 161, 211, 229, 62, 0,
	0, 133, 0, 0, 175, 228, 0, 0, 0, 234,
	149, 0, 0, 0, 222, 238, 239, 0, 0, 236,
	0, 237, 0, 0, 0, 241, 146, 243, 0, 0,
	150, 151, 0, 0, 0, 0, 248, 0, 0, 0,
	0, 0, 247, 0, 0, 0, 0, 251, 252, 0,
	41, 40, 42, 43, 44, 0, 177, 179, 36, 0,
	37, 0, 181, 0, 182, 183, 0, 0, 0, 186,
	187, 0, 0, 0, 189, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 195, 0, 0, 0, 0, 0,
	0, 201, 202, 0, 0, 0, 0, 206, 0, 208,
	0, 0, 0, 0, 0, 214, 0, 0, 25, 217,
	0, 28, 26, 27, 120, 119, 23, 0, 0, 122,
	121, 0, 0, 0, 0, 126, 62, 0, 0, 123,
	0, 124, 232, 125, 49, 38, 39, 45, 46, 48,
	47, 41, 40, 42, 43, 44, 0, 24, 0, 36,
	0, 37, 21, 0, 22, 0, 0, 128, 25, 72,
	0, 28, 26, 27, 120, 119, 23, 0, 0, 122,
	121, 0, 0, 0, 0, 126, 62, 0, 0, 123,
	0, 124, 0, 125, 0, 0, 28, 26, 27, 160,
	0, 23, 0, 0, 60, 0, 0, 24, 0, 0,
	0, 62, 21, 0, 22, 0, 0, 224, 0, 72,
	57, 58, 0, 0, 0, 25, 0, 0, 28, 26,
	27, 59, 24, 23, 0, 0, 60, 21, 0, 163,
	0, 0, 0, 62, 72, 0, 0, 56, 28, 26,
	27, 197, 119, 23, 0, 0, 122, 121, 0, 0,
	0, 0, 126, 62, 24, 0, 123, 0, 124, 21,
	125, 22, 0, 28, 26, 27, 160, 0, 23, 0,
	0, 60, 0, 0, 24, 0, 0, 0, 62, 21,
	0, 22, 0, 0, 0, 0, 72, 57, 58, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 24,
	0, 0, 0, 0, 21, 0, 163, 0, 0, 0,
	0, 72, 0, 0, 56, 50, 49, 38, 39, 45,
	46, 48, 47, 41, 40, 42, 43, 44, 0, 0,
	0, 36, 0, 37, 0, 157, 72, 28, 26, 52,
	59, 0, 23, 0, 0, 60, 0, 0, 0, 0,
	0, 0, 62, 0, 0, 0, 0, 0, 0, 0,
	0, 57, 58, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 24, 0, 0, 0, 0, 21, 0,
	55, 0, 0, 0, 0, 61, 0, 0, 56, 50,
	49, 38, 39, 45, 46, 48, 47, 41, 40, 42,
	43, 44, 0, 0, 0, 36, 0, 37, 25, 17,
	72, 28, 26, 27, 7, 6, 23, 0, 0, 8,
	9, 11, 10, 14, 15, 16, 12, 13, 4, 0,
	50, 49, 38, 39, 45, 46, 48, 47, 41, 40,
	42, 43, 44, 0, 0, 0, 36, 24, 37, 0,
	35, 0, 21, 0, 22, 50, 49, 38, 39, 45,
	46, 48, 47, 41, 40, 42, 43, 44, 0, 0,
	0, 36, 0, 37, 245, 50, 49, 38, 39, 45,
	46, 48, 47, 41, 40, 42, 43, 44, 0, 0,
	0, 36, 250, 37, 50, 49, 38, 39, 45, 46,
	48, 47, 41, 40, 42, 43, 44, 0, 0, 0,
	36, 244, 37, 50, 49, 38, 39, 45, 46, 48,
	47, 41, 40, 42, 43, 44, 0, 0, 0, 36,
	227, 37, 50, 49, 38, 39, 45, 46, 48, 47,
	41, 40, 42, 43, 44, 0, 0, 0, 36, 221,
	37, 50, 49, 38, 39, 45, 46, 48, 47, 41,
	40, 42, 43, 44, 0, 0, 0, 36, 174, 37,
	50, 49, 38, 39, 45, 46, 48, 47, 41, 40,
	42, 43, 44, 0, 0, 0, 36, 173, 37, 50,
	49, 38, 39, 45, 46, 48, 47, 41, 40, 42,
	43, 44, 0, 0, 0, 36, 172, 37, 50, 49,
	38, 39, 45, 46, 48, 47, 41, 40, 42, 43,
	44, 0, 0, 0, 36, 147, 37, 50, 49, 38,
	39, 45, 46, 48, 47, 41, 40, 42, 43, 44,
	0, 0, 0, 36, 140, 37, 50, 49, 38, 39,
	45, 46, 48, 47, 41, 40, 42, 43, 44, 0,
	0, 0, 36, 0, 37, 28, 26, 27, 59, 0,
	23, 0, 0, 60, 0, 0, 0, 0, 0, 0,
	62, 38, 39, 45, 46, 48, 47, 41, 40, 42,
	43, 44, 0, 0, 0, 36, 0, 37, 0, 25,
	0, 24, 28, 26, 27, 59, 21, 23, 22, 0,
	60, 0, 0, 72, 0, 0, 0, 62, 28, 26,
	27, 59, 0, 23, 0, 0, 60, 28, 26, 27,
	59, 0, 23, 62, 0, 60, 0, 0, 24, 0,
	0, 0, 62, 21, 230, 22, 0, 0, 0, 0,
	0, 0, 0, 0, 24, 0, 0, 0, 0, 21,
	0, 22, 0, 24, 0, 0, 0, 0, 21, 0,
	64,
}
var yyPact = [...]int{

	614, -1000, 187, 614, 145, 606, 169, 540, 930, 921,
	921, 53, -3, 868, 107, 13, 98, -1000, 179, -1000,
	-41, -1000, 921, 162, 921, -1000, -1000, -1000, -1000, -1000,
	614, -1000, -1000, 34, -1000, 921, -1000, 159, 921, 921,
	921, 921, 921, 921, 921, 921, 921, 921, 921, 921,
	921, 24, -1000, 822, -1000, 921, 921, -1000, -1000, 3,
	92, 614, -46, 822, 921, 822, 822, -1000, -1000, -1000,
	-1000, 921, 314, 822, -1000, 921, 921, -1000, 921, -1000,
	-1000, 421, 186, 803, 81, 32, -1000, 145, 822, 421,
	-1000, 218, 218, 49, 49, 32, 32, 32, 218, 218,
	218, 218, 855, 309, 921, -1000, 784, 421, 822, -1000,
	-1000, -18, 186, 822, -19, 76, 314, 491, -1000, 155,
	466, 921, 930, 921, 70, 9, 57, 26, -1000, 179,
	765, 746, 727, 186, 179, -30, -31, 822, -41, -52,
	-1000, -1000, -1000, -39, -41, 822, 421, 16, -41, -39,
	421, 186, -1000, -41, -1000, 314, -1000, 921, -1000, 21,
	38, -1000, 822, 921, 822, 822, 565, 441, 132, 921,
	-1000, -1000, 16, 16, 16, -1000, -1000, 100, -1000, 94,
	136, 421, 133, 131, -39, -1000, 115, 109, -41, 108,
	-1000, 822, 921, 921, 708, 421, 135, 389, 28, 39,
	689, 364, 421, -1000, -1000, -1000, 905, -1000, 105, -1000,
	-1000, -39, -1000, -1000, 99, 16, -1000, 96, -1000, 822,
	822, 9, -41, 9, 921, 921, 153, 9, -1000, 822,
	-1000, -1000, 93, 16, -1000, -1000, -1000, -1000, 670, 631,
	116, -1000, -1000, -1000, 9, 921, 36, -1000, 651, 9,
	9, -1000, -1000,
}
var yyPgo = [...]int{

	0, 54, 199, 197, 17, 13, 22, 130, 29, 2,
	0, 24, 3, 7, 28, 5, 188,
}
var yyR1 = [...]int{

	0, 1, 1, 1, 1, 4, 4, 4, 4, 7,
	7, 8, 8, 6, 6, 3, 3, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 12, 5, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
	5, 13, 9, 9, 9, 11, 11, 11, 14, 14,
	15, 15, 10, 10, 10, 10, 10, 10, 10, 10,
	10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
	10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
	10, 16, 16, 16, 16, 16,
}
var yyR2 = [...]int{

	0, 0, 1, 3, 2, 0, 1, 3, 2, 0,
	2, 1, 2, 1, 1, 1, 1, 2, 1, 2,
	4, 8, 3, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 5, 5, 2, 5, 5,
	7, 3, 1, 1, 2, 4, 4, 3, 2, 2,
	2, 2, 3, 5, 7, 9, 8, 5, 5, 4,
	2, 3, 1, 1, 3, 0, 1, 4, 1, 4,
	3, 3, 1, 1, 5, 6, 5, 6, 6, 6,
	6, 6, 5, 3, 7, 2, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 2,
	2, 1, 1, 1, 1, 3,
}
var yyChk = [...]int{

	-1000, -1, -2, -3, 24, -10, 11, 10, 15, 16,
	18, 17, 22, 23, 19, 20, 21, 5, -8, -16,
	-14, 48, 50, 12, 43, 4, 8, 9, 7, -15,
	-3, -1, -9, 10, 44, 54, 50, 52, 36, 37,
	43, 42, 44, 45, 46, 38, 39, 41, 40, 35,
	34, 10, 9, -10, -12, 50, 58, 31, 32, 10,
	15, 55, 22, -10, 50, -10, -10, 13, 14, -12,
	-13, 58, 55, -10, -13, 50, 50, -12, 50, 4,
	57, -7, -7, -10, 10, -10, -1, 52, -10, -7,
	10, -10, -10, -10, -10, -10, -10, -10, -10, -10,
	-10, -10, -10, -10, 54, 50, -10, -7, -10, 50,
	50, -1, -7, -10, -4, -5, -6, -10, -13, 11,
	10, 16, 15, 25, 27, 29, 21, -11, 53, -8,
	-10, -10, -10, -7, -8, -11, -14, -10, -14, 10,
	51, 50, -9, -11, -14, -10, -7, 51, -14, -11,
	-7, -7, 56, -14, 56, -6, -4, 54, -13, 10,
	10, -13, -10, 50, -10, -10, -10, 50, -13, 50,
	33, 57, 51, 51, 51, -15, 57, -7, 57, -7,
	-7, -7, -7, -7, -11, -12, -7, -7, -14, -7,
	-4, -10, 54, 54, -10, -7, -13, 10, -5, 30,
	-10, -7, -7, -12, -12, -12, -7, 49, -7, 49,
	51, -11, 51, 51, -7, 51, 51, -7, 51, -10,
	-10, 51, -14, 26, 28, 53, 50, 51, -5, -10,
	49, 49, -7, 51, -12, 51, -13, -13, -10, -10,
	10, -13, 51, -12, 51, 53, 10, -13, -10, 51,
	51, -13, -13,
}
var yyDef = [...]int{

	1, -2, 2, 1, 0, 18, 0, 104, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 15, 16, 72,
	73, 9, 9, 0, 0, 11, 101, 102, 103, 68,
	1, 4, 17, 62, 63, 0, 9, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 19, -2, 24, 31, 9, 0, 99, 100, 104,
	0, 1, 0, 25, 9, 26, 27, 28, 29, 30,
	32, 0, -2, 33, 34, 0, 0, 37, 0, 12,
	9, 65, 0, 0, 0, 85, 3, 0, 22, 65,
	83, 86, 87, 88, 89, 90, 91, 92, 93, 94,
	95, 96, 97, 98, 0, 9, 0, 65, 70, 9,
	9, 0, 0, 71, 0, 6, -2, -2, 43, 0,
	104, 0, 0, 0, 0, 0, 0, 0, 13, 14,
	0, 0, 0, 0, 10, 9, -2, 66, 9, 0,
	105, 9, 64, 9, -2, 20, 65, 105, -2, 9,
	65, 0, 41, 9, 61, -2, 8, 0, 60, 44,
	104, 48, 50, 9, 49, 51, 0, 65, 0, 0,
	9, 9, 0, 0, 0, 69, 9, 0, 9, 0,
	0, 65, 0, 0, 9, 39, 0, 0, 9, 0,
	7, 47, 0, 0, 0, 65, 52, 104, 0, 0,
	0, 65, 0, 35, 36, 38, 0, 74, 0, 76,
	82, 9, 79, 81, 0, 82, 78, 0, 80, 45,
	46, 105, -2, 0, 0, 0, 0, 0, 59, 67,
	75, 77, 0, 0, 40, 80, 58, 53, 0, 0,
	0, 57, 84, 21, 0, 0, 0, 54, 0, 0,
	0, 56, 55,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 46, 3, 3,
	50, 51, 44, 42, 57, 43, 52, 45, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 58, 53,
	36, 54, 37, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 48, 3, 49, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 55, 3, 56,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 38, 39, 40, 41, 47,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	}
	goto yystack /* stack new state and value */
}
