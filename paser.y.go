// Code generated by goyacc -o paser.y.go -v parser.y.output parser.y. DO NOT EDIT.

//line parser.y:2
package main

import __yyfmt__ "fmt"

//line parser.y:2

//line parser.y:5
type yySymType struct {
	yys          int
	num          int
	str          string
	indent_level int
}

const NR = 57346
const EOF = 57347
const COMMENT = 57348
const BOOL = 57349
const NUMBER = 57350
const STRING = 57351
const IDENT = 57352
const DEF = 57353
const NEW = 57354
const ANY = 57355
const NONE = 57356
const SH = 57357
const ECHO = 57358
const AGENT = 57359
const LABEL = 57360
const STAGE = 57361
const NODE = 57362
const DIR = 57363
const SCRIPT = 57364
const ENVIRONMENT = 57365
const IMPORT = 57366
const IF = 57367
const ELSE = 57368
const FOR = 57369
const IN = 57370
const TRY = 57371
const CATCH = 57372
const INCREMENT = 57373
const DECREMENT = 57374
const ARROW = 57375
const OR = 57376
const AND = 57377
const EQ = 57378
const NE = 57379
const LE = 57380
const GE = 57381
const UNARY_OPERAND = 57382

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"NR",
	"EOF",
	"COMMENT",
	"BOOL",
	"NUMBER",
	"STRING",
	"IDENT",
	"DEF",
	"NEW",
	"ANY",
	"NONE",
	"SH",
	"ECHO",
	"AGENT",
	"LABEL",
	"STAGE",
	"NODE",
	"DIR",
	"SCRIPT",
	"ENVIRONMENT",
	"IMPORT",
	"IF",
	"ELSE",
	"FOR",
	"IN",
	"TRY",
	"CATCH",
	"INCREMENT",
	"DECREMENT",
	"ARROW",
	"OR",
	"AND",
	"'<'",
	"'>'",
	"EQ",
	"NE",
	"LE",
	"GE",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UNARY_OPERAND",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"'='",
	"'{'",
	"'}'",
	"','",
	"':'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser.y:175

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 52,
	4, 21,
	5, 21,
	-2, 94,
	-1, 68,
	56, 4,
	-2, 61,
	-1, 109,
	56, 4,
	-2, 61,
	-1, 110,
	33, 62,
	57, 62,
	-2, 40,
	-1, 128,
	4, 7,
	49, 7,
	-2, 68,
	-1, 136,
	4, 7,
	51, 7,
	-2, 68,
	-1, 140,
	4, 7,
	51, 7,
	-2, 68,
	-1, 145,
	56, 4,
	-2, 61,
	-1, 200,
	4, 7,
	51, 7,
	-2, 68,
}

const yyPrivate = 57344

const yyLast = 767

var yyAct = [...]int{

	129, 5, 29, 54, 5, 108, 56, 111, 53, 61,
	62, 63, 32, 107, 69, 66, 20, 76, 109, 73,
	67, 70, 1, 79, 160, 81, 31, 144, 159, 126,
	18, 5, 18, 18, 64, 65, 84, 143, 68, 87,
	88, 89, 90, 91, 92, 93, 94, 95, 96, 97,
	98, 99, 160, 82, 72, 60, 102, 104, 101, 60,
	18, 5, 100, 28, 26, 27, 59, 119, 23, 110,
	57, 58, 122, 123, 177, 124, 60, 203, 25, 36,
	25, 37, 83, 106, 25, 167, 57, 58, 221, 105,
	18, 204, 157, 178, 128, 130, 134, 56, 121, 24,
	25, 137, 136, 133, 21, 105, 22, 77, 78, 74,
	110, 68, 71, 56, 152, 154, 155, 156, 148, 183,
	140, 151, 85, 146, 25, 214, 158, 145, 164, 120,
	25, 208, 41, 40, 42, 43, 44, 25, 121, 121,
	36, 103, 37, 172, 201, 127, 110, 197, 176, 42,
	43, 44, 25, 135, 79, 36, 25, 37, 110, 175,
	25, 218, 125, 182, 180, 186, 187, 188, 33, 190,
	25, 141, 213, 149, 86, 121, 131, 196, 198, 199,
	80, 51, 152, 75, 194, 110, 206, 138, 19, 151,
	205, 142, 28, 26, 27, 150, 200, 23, 2, 193,
	209, 189, 34, 211, 212, 3, 171, 191, 30, 210,
	141, 0, 215, 165, 166, 0, 57, 58, 220, 168,
	0, 169, 170, 0, 219, 0, 173, 174, 24, 223,
	224, 25, 17, 21, 0, 153, 192, 0, 0, 179,
	68, 0, 0, 56, 0, 184, 185, 141, 25, 0,
	0, 28, 26, 27, 113, 112, 23, 195, 0, 115,
	114, 0, 0, 0, 0, 0, 0, 0, 0, 116,
	0, 117, 0, 118, 0, 0, 0, 0, 207, 0,
	0, 0, 0, 0, 0, 0, 0, 24, 0, 0,
	0, 0, 21, 0, 22, 0, 0, 120, 0, 68,
	50, 49, 38, 39, 45, 46, 48, 47, 41, 40,
	42, 43, 44, 0, 0, 0, 36, 0, 37, 25,
	147, 68, 28, 26, 27, 113, 112, 23, 0, 0,
	115, 114, 28, 26, 27, 150, 0, 23, 0, 0,
	116, 0, 117, 0, 118, 0, 0, 0, 0, 0,
	0, 0, 0, 202, 0, 0, 57, 58, 24, 0,
	0, 0, 0, 21, 0, 22, 0, 0, 24, 0,
	68, 0, 0, 21, 0, 153, 0, 0, 0, 0,
	68, 0, 0, 56, 50, 49, 38, 39, 45, 46,
	48, 47, 41, 40, 42, 43, 44, 0, 0, 0,
	36, 0, 37, 25, 17, 68, 28, 26, 27, 7,
	6, 23, 0, 0, 8, 9, 11, 10, 14, 15,
	16, 12, 13, 4, 0, 0, 28, 26, 27, 181,
	112, 23, 0, 0, 115, 114, 28, 26, 52, 59,
	0, 23, 24, 0, 116, 0, 117, 21, 118, 22,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	57, 58, 24, 0, 0, 0, 0, 21, 0, 22,
	0, 0, 24, 0, 68, 0, 0, 21, 0, 55,
	0, 0, 0, 0, 60, 0, 0, 56, 50, 49,
	38, 39, 45, 46, 48, 47, 41, 40, 42, 43,
	44, 0, 0, 0, 36, 0, 37, 0, 35, 50,
	49, 38, 39, 45, 46, 48, 47, 41, 40, 42,
	43, 44, 0, 0, 0, 36, 0, 37, 217, 50,
	49, 38, 39, 45, 46, 48, 47, 41, 40, 42,
	43, 44, 0, 0, 0, 36, 222, 37, 50, 49,
	38, 39, 45, 46, 48, 47, 41, 40, 42, 43,
	44, 0, 0, 0, 36, 216, 37, 50, 49, 38,
	39, 45, 46, 48, 47, 41, 40, 42, 43, 44,
	0, 0, 0, 36, 163, 37, 50, 49, 38, 39,
	45, 46, 48, 47, 41, 40, 42, 43, 44, 0,
	0, 0, 36, 162, 37, 50, 49, 38, 39, 45,
	46, 48, 47, 41, 40, 42, 43, 44, 0, 0,
	0, 36, 161, 37, 50, 49, 38, 39, 45, 46,
	48, 47, 41, 40, 42, 43, 44, 0, 0, 0,
	36, 139, 37, 50, 49, 38, 39, 45, 46, 48,
	47, 41, 40, 42, 43, 44, 0, 0, 0, 36,
	132, 37, 50, 49, 38, 39, 45, 46, 48, 47,
	41, 40, 42, 43, 44, 0, 0, 0, 36, 0,
	37, 49, 38, 39, 45, 46, 48, 47, 41, 40,
	42, 43, 44, 0, 0, 0, 36, 0, 37, 38,
	39, 45, 46, 48, 47, 41, 40, 42, 43, 44,
	0, 0, 0, 36, 25, 37, 0, 28, 26, 27,
	59, 0, 23, 28, 26, 27, 59, 0, 23, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 24, 0, 0, 0, 0, 21, 24,
	22, 0, 0, 0, 21, 0, 22,
}
var yyPact = [...]int{

	399, -1000, 227, 399, 158, 454, 171, 429, 716, 716,
	716, 21, -17, 56, 62, 4, 59, -1000, 179, -1000,
	-40, -1000, 716, 170, 716, -1000, -1000, -1000, -1000, -1000,
	399, -1000, -1000, 30, -1000, 716, -1000, 164, 716, 716,
	716, 716, 716, 716, 716, 716, 716, 716, 716, 716,
	716, 8, -1000, 628, -1000, 716, 716, -1000, -1000, 55,
	399, 628, 628, 628, -1000, -1000, -1000, -1000, 244, 628,
	-1000, 716, 716, -1000, 716, -1000, -1000, 710, 166, 609,
	53, 29, -1000, 158, 628, 710, -1000, 90, 90, 105,
	105, 29, 29, 29, 90, 90, 90, 90, 663, 646,
	716, -1000, 590, 710, 628, -1000, -19, -29, 76, 244,
	266, -1000, 163, 185, 716, 716, 716, 42, -17, -5,
	-1000, 179, 571, 552, 533, 166, 179, -33, -40, 628,
	-40, -52, -1000, -1000, -1000, -33, -40, 628, 710, 0,
	-40, -33, 710, -1000, -1000, 244, -1000, 716, -1000, 20,
	39, -1000, 628, 716, 628, 628, 350, 419, 89, -1000,
	-1000, 0, 0, 0, -1000, 152, 120, 156, 710, 148,
	133, -33, -1000, 126, 96, -1000, 628, 716, 716, 710,
	118, 325, 24, 41, 315, 710, -1000, -1000, -1000, -1000,
	-1000, -1000, -33, -1000, -1000, 80, 0, -1000, 628, 628,
	-40, -17, 716, 716, 162, -1000, 628, 74, 0, -1000,
	-1000, 514, 475, 151, -1000, -1000, -17, 716, 37, -1000,
	495, -17, -17, -1000, -1000,
}
var yyPgo = [...]int{

	0, 22, 198, 205, 13, 5, 18, 85, 29, 12,
	0, 67, 3, 7, 16, 2, 188,
}
var yyR1 = [...]int{

	0, 1, 1, 1, 4, 4, 4, 7, 7, 8,
	8, 6, 6, 3, 3, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 12,
	5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 5, 5, 5, 5, 5, 13, 9, 9,
	9, 11, 11, 11, 14, 14, 15, 10, 10, 10,
	10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
	10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
	10, 10, 10, 16, 16, 16, 16, 16,
}
var yyR2 = [...]int{

	0, 0, 3, 2, 0, 3, 2, 0, 2, 1,
	2, 1, 1, 1, 1, 2, 1, 2, 4, 8,
	3, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 5, 5, 2, 5, 5, 7, 3,
	1, 1, 2, 4, 4, 3, 2, 2, 2, 2,
	3, 5, 7, 9, 8, 4, 2, 3, 1, 1,
	3, 0, 1, 4, 1, 4, 3, 1, 1, 5,
	5, 6, 6, 6, 5, 3, 7, 2, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 2, 2, 1, 1, 1, 1, 3,
}
var yyChk = [...]int{

	-1000, -1, -2, -3, 24, -10, 11, 10, 15, 16,
	18, 17, 22, 23, 19, 20, 21, 5, -8, -16,
	-14, 48, 50, 12, 43, 4, 8, 9, 7, -15,
	-3, -1, -9, 10, 44, 54, 50, 52, 36, 37,
	43, 42, 44, 45, 46, 38, 39, 41, 40, 35,
	34, 10, 9, -10, -12, 50, 58, 31, 32, 10,
	55, -10, -10, -10, 13, 14, -12, -13, 55, -10,
	-13, 50, 50, -12, 50, 4, 57, -7, -7, -10,
	10, -10, -1, 52, -10, -7, 10, -10, -10, -10,
	-10, -10, -10, -10, -10, -10, -10, -10, -10, -10,
	54, 50, -10, -7, -10, 50, -1, -4, -5, -6,
	-10, -13, 11, 10, 16, 15, 25, 27, 29, -11,
	53, -8, -10, -10, -10, -7, -8, -11, -14, -10,
	-14, 10, 51, 50, -9, -11, -14, -10, -7, 51,
	-14, -11, -7, 56, 56, -6, -4, 54, -13, 10,
	10, -13, -10, 50, -10, -10, -10, 50, -13, 33,
	57, 51, 51, 51, -15, -7, -7, -7, -7, -7,
	-7, -11, -12, -7, -7, -4, -10, 54, 54, -7,
	-13, 10, -5, 30, -7, -7, -12, -12, -12, 49,
	49, 51, -11, 51, 51, -7, 51, 51, -10, -10,
	-14, 26, 28, 53, 50, -5, -10, -7, 51, -12,
	-13, -10, -10, 10, 51, -12, 51, 53, 10, -13,
	-10, 51, 51, -13, -13,
}
var yyDef = [...]int{

	1, -2, 0, 1, 0, 16, 0, 96, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 13, 14, 67,
	68, 7, 7, 0, 0, 9, 93, 94, 95, 64,
	1, 3, 15, 58, 59, 0, 7, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 17, -2, 22, 29, 7, 0, 91, 92, 96,
	1, 23, 24, 25, 26, 27, 28, 30, -2, 31,
	32, 0, 0, 35, 0, 10, 7, 61, 0, 0,
	0, 77, 2, 0, 20, 61, 75, 78, 79, 80,
	81, 82, 83, 84, 85, 86, 87, 88, 89, 90,
	0, 7, 0, 61, 66, 7, 0, 0, 0, -2,
	-2, 41, 0, 96, 0, 0, 0, 0, 0, 0,
	11, 12, 0, 0, 0, 0, 8, 7, -2, 62,
	7, 0, 97, 7, 60, 7, -2, 18, 61, 97,
	-2, 7, 61, 39, 57, -2, 6, 0, 56, 42,
	96, 46, 48, 7, 47, 49, 0, 61, 0, 7,
	7, 0, 0, 0, 65, 0, 0, 0, 61, 0,
	0, 7, 37, 0, 0, 5, 45, 0, 0, 61,
	50, 96, 0, 0, 61, 0, 33, 34, 36, 69,
	70, 74, 7, 72, 73, 0, 74, 71, 43, 44,
	-2, 0, 0, 0, 0, 55, 63, 0, 0, 38,
	51, 0, 0, 0, 76, 19, 0, 0, 0, 52,
	0, 0, 0, 54, 53,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 46, 3, 3,
	50, 51, 44, 42, 57, 43, 52, 45, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 58, 53,
	36, 54, 37, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 48, 3, 49, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 55, 3, 56,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 38, 39, 40, 41, 47,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	}
	goto yystack /* stack new state and value */
}
