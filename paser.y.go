// Code generated by goyacc -o paser.y.go -v parser.y.output parser.y. DO NOT EDIT.

//line parser.y:2
package main

import __yyfmt__ "fmt"

//line parser.y:2

//line parser.y:5
type yySymType struct {
	yys          int
	num          int
	str          string
	indent_level int
}

const NR = 57346
const EOF = 57347
const COMMENT = 57348
const BOOL = 57349
const NUMBER = 57350
const STRING = 57351
const IDENT = 57352
const DEF = 57353
const NEW = 57354
const ANY = 57355
const NONE = 57356
const SH = 57357
const ECHO = 57358
const AGENT = 57359
const LABEL = 57360
const STAGE = 57361
const NODE = 57362
const DIR = 57363
const SCRIPT = 57364
const ENVIRONMENT = 57365
const IMPORT = 57366
const IF = 57367
const ELSE = 57368
const OR = 57369
const AND = 57370
const EQ = 57371
const NE = 57372
const LE = 57373
const GE = 57374
const UNARY_OPERAND = 57375

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"NR",
	"EOF",
	"COMMENT",
	"BOOL",
	"NUMBER",
	"STRING",
	"IDENT",
	"DEF",
	"NEW",
	"ANY",
	"NONE",
	"SH",
	"ECHO",
	"AGENT",
	"LABEL",
	"STAGE",
	"NODE",
	"DIR",
	"SCRIPT",
	"ENVIRONMENT",
	"IMPORT",
	"IF",
	"ELSE",
	"OR",
	"AND",
	"'<'",
	"'>'",
	"EQ",
	"NE",
	"LE",
	"GE",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UNARY_OPERAND",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"'='",
	"'{'",
	"'}'",
	"','",
	"':'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser.y:155

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 49,
	4, 18,
	5, 18,
	-2, 80,
	-1, 117,
	4, 7,
	42, 7,
	-2, 56,
	-1, 125,
	4, 7,
	44, 7,
	-2, 56,
	-1, 127,
	4, 7,
	44, 7,
	-2, 56,
}

const yyPrivate = 57344

const yyLast = 572

var yyAct = [...]int{

	118, 5, 128, 100, 5, 51, 31, 50, 56, 57,
	58, 28, 102, 64, 104, 19, 61, 98, 53, 144,
	68, 71, 74, 63, 76, 53, 62, 65, 115, 17,
	5, 17, 17, 136, 79, 131, 130, 82, 83, 84,
	85, 86, 87, 88, 89, 90, 91, 92, 93, 94,
	67, 72, 55, 95, 97, 55, 5, 1, 17, 59,
	60, 30, 157, 156, 103, 78, 98, 111, 112, 24,
	113, 63, 24, 73, 53, 116, 34, 122, 35, 24,
	24, 69, 66, 124, 17, 123, 80, 77, 117, 119,
	24, 135, 110, 173, 55, 32, 125, 39, 38, 40,
	41, 42, 24, 103, 96, 34, 133, 35, 138, 139,
	164, 109, 127, 99, 132, 24, 40, 41, 42, 178,
	170, 137, 34, 114, 35, 24, 143, 24, 163, 81,
	110, 110, 151, 103, 24, 155, 154, 75, 24, 16,
	120, 70, 169, 18, 101, 2, 159, 160, 161, 3,
	129, 166, 29, 0, 158, 168, 0, 171, 172, 0,
	0, 110, 0, 174, 0, 167, 0, 165, 145, 146,
	0, 147, 0, 0, 148, 176, 149, 150, 0, 152,
	153, 0, 0, 0, 0, 0, 0, 0, 177, 0,
	0, 0, 0, 0, 0, 0, 162, 0, 48, 47,
	36, 37, 43, 44, 46, 45, 39, 38, 40, 41,
	42, 0, 0, 0, 34, 0, 35, 0, 175, 63,
	48, 47, 36, 37, 43, 44, 46, 45, 39, 38,
	40, 41, 42, 0, 0, 0, 34, 0, 35, 0,
	134, 24, 16, 0, 27, 25, 26, 6, 0, 22,
	0, 0, 7, 8, 10, 9, 13, 14, 15, 11,
	12, 4, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 23, 0, 0, 0, 0, 20, 0,
	21, 48, 47, 36, 37, 43, 44, 46, 45, 39,
	38, 40, 41, 42, 0, 0, 0, 34, 0, 35,
	24, 33, 0, 27, 25, 26, 106, 105, 22, 0,
	0, 0, 107, 0, 0, 0, 0, 0, 0, 0,
	0, 108, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 23, 0, 0, 0, 0, 20, 0, 21,
	0, 0, 109, 0, 63, 48, 47, 36, 37, 43,
	44, 46, 45, 39, 38, 40, 41, 42, 0, 0,
	0, 34, 142, 35, 48, 47, 36, 37, 43, 44,
	46, 45, 39, 38, 40, 41, 42, 0, 0, 0,
	34, 141, 35, 48, 47, 36, 37, 43, 44, 46,
	45, 39, 38, 40, 41, 42, 0, 0, 0, 34,
	140, 35, 48, 47, 36, 37, 43, 44, 46, 45,
	39, 38, 40, 41, 42, 0, 0, 0, 34, 126,
	35, 48, 47, 36, 37, 43, 44, 46, 45, 39,
	38, 40, 41, 42, 0, 0, 0, 34, 121, 35,
	27, 25, 49, 54, 0, 22, 48, 47, 36, 37,
	43, 44, 46, 45, 39, 38, 40, 41, 42, 0,
	0, 0, 34, 0, 35, 0, 0, 0, 0, 23,
	0, 0, 0, 0, 20, 0, 52, 0, 0, 0,
	0, 55, 0, 0, 53, 47, 36, 37, 43, 44,
	46, 45, 39, 38, 40, 41, 42, 0, 0, 0,
	34, 0, 35, 36, 37, 43, 44, 46, 45, 39,
	38, 40, 41, 42, 0, 0, 0, 34, 0, 35,
	27, 25, 26, 54, 0, 22, 24, 0, 0, 27,
	25, 26, 54, 0, 22, 27, 25, 26, 54, 0,
	22, 0, 0, 0, 0, 0, 0, 0, 0, 23,
	0, 0, 0, 0, 20, 0, 21, 0, 23, 0,
	0, 63, 0, 20, 23, 21, 0, 0, 0, 20,
	0, 21,
}
var yyPact = [...]int{

	237, -1000, 134, 237, 85, 254, 433, 528, 528, 528,
	46, -25, 513, 39, 7, 38, -1000, 137, -1000, -29,
	-1000, 528, 127, 528, -1000, -1000, -1000, -1000, -1000, 237,
	-1000, -1000, 20, 528, -1000, 119, 528, 528, 528, 528,
	528, 528, 528, 528, 528, 528, 528, 528, 528, -1000,
	419, -1000, 528, 528, -26, 237, 419, 419, 419, -1000,
	-1000, -1000, -1000, 296, 419, -1000, 528, 528, -1000, 528,
	-1000, -1000, 522, 130, 394, 34, 33, -1000, 85, 419,
	522, -1000, 62, 62, 79, 79, 33, 33, 33, 62,
	62, 62, 62, 474, 457, 375, 522, 419, -1000, -13,
	-14, 65, 296, 193, -1000, 81, 23, 528, 528, -1000,
	137, 356, 337, 318, 130, 137, -31, -29, 419, -29,
	-33, -1000, -1000, -1000, -31, -29, 4, -29, -31, 522,
	-1000, -1000, 296, -1000, 528, 16, 15, -1000, 419, 171,
	4, 4, 4, -1000, -1000, 86, 68, 123, 522, 121,
	111, -1000, 98, 76, -1000, 419, 528, 528, 67, -1000,
	-1000, -1000, 522, -1000, -1000, -1000, -31, -1000, -1000, 4,
	-1000, 419, 419, -25, 419, 75, -1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 57, 145, 149, 3, 144, 12, 51, 28, 6,
	0, 5, 14, 15, 2, 11, 143,
}
var yyR1 = [...]int{

	0, 1, 1, 1, 4, 4, 4, 7, 7, 8,
	8, 6, 6, 3, 3, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 11, 5, 5, 5,
	5, 5, 5, 5, 5, 5, 12, 9, 9, 14,
	14, 14, 13, 13, 15, 10, 10, 10, 10, 10,
	10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
	10, 10, 10, 10, 10, 10, 10, 10, 10, 16,
	16, 16, 16, 16,
}
var yyR2 = [...]int{

	0, 0, 3, 2, 0, 3, 2, 0, 2, 1,
	2, 1, 1, 1, 1, 2, 1, 3, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	5, 5, 2, 5, 5, 7, 3, 1, 1, 4,
	4, 3, 2, 2, 3, 5, 3, 1, 3, 0,
	1, 4, 1, 4, 3, 1, 1, 5, 5, 6,
	6, 6, 5, 3, 7, 2, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 1,
	1, 1, 1, 3,
}
var yyChk = [...]int{

	-1000, -1, -2, -3, 24, -10, 10, 15, 16, 18,
	17, 22, 23, 19, 20, 21, 5, -8, -16, -13,
	41, 43, 12, 36, 4, 8, 9, 7, -15, -3,
	-1, -9, 10, 47, 43, 45, 29, 30, 36, 35,
	37, 38, 39, 31, 32, 34, 33, 28, 27, 9,
	-10, -11, 43, 51, 10, 48, -10, -10, -10, 13,
	14, -11, -12, 48, -10, -12, 43, 43, -11, 43,
	4, 50, -7, -7, -10, 10, -10, -1, 45, -10,
	-7, 10, -10, -10, -10, -10, -10, -10, -10, -10,
	-10, -10, -10, -10, -10, -10, -7, -10, 43, -1,
	-4, -5, -6, -10, -12, 11, 10, 16, 25, 46,
	-8, -10, -10, -10, -7, -8, -14, -13, -10, -13,
	10, 44, 43, -9, -14, -13, 44, -13, -14, -7,
	49, 49, -6, -4, 47, 10, 10, -12, -10, -10,
	44, 44, 44, -15, 50, -7, -7, -7, -7, -7,
	-7, -11, -7, -7, -4, -10, 47, 47, -12, -11,
	-11, -11, -7, 42, 42, 44, -14, 44, 44, 44,
	44, -10, -10, 26, -10, -7, -11, -12, 44,
}
var yyDef = [...]int{

	1, -2, 0, 1, 0, 16, 82, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 13, 14, 55, 56,
	7, 7, 0, 0, 9, 79, 80, 81, 52, 1,
	3, 15, 47, 0, 7, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, -2,
	19, 26, 7, 0, 82, 1, 20, 21, 22, 23,
	24, 25, 27, 4, 28, 29, 0, 0, 32, 0,
	10, 7, 49, 0, 0, 0, 65, 2, 0, 17,
	49, 63, 66, 67, 68, 69, 70, 71, 72, 73,
	74, 75, 76, 77, 78, 0, 49, 54, 7, 0,
	0, 0, 4, 37, 38, 0, 82, 0, 0, 11,
	12, 0, 0, 0, 0, 8, 7, -2, 50, 7,
	0, 83, 7, 48, 7, -2, 83, -2, 7, 49,
	36, 46, 4, 6, 0, 0, 0, 42, 43, 0,
	0, 0, 0, 53, 7, 0, 0, 0, 49, 0,
	0, 34, 0, 0, 5, 41, 0, 0, 44, 30,
	31, 33, 0, 57, 58, 62, 7, 60, 61, 62,
	59, 39, 40, 0, 51, 0, 35, 45, 64,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 39, 3, 3,
	43, 44, 37, 35, 50, 36, 45, 38, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 51, 46,
	29, 47, 30, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 41, 3, 42, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 48, 3, 49,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 31, 32, 33,
	34, 40,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	}
	goto yystack /* stack new state and value */
}
